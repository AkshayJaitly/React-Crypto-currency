{"version":3,"sources":["logo.svg","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","NumberFormat","require","App","Component","constructor","props","super","this","state","cryptos","componentDidMount","axios","get","then","res","data","console","log","setState","render","className","Object","keys","map","key","id","value","USD","displayType","decimalPrecision","thousandSeparator","prefix","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,qICIvCC,EAAeC,EAAQ,IAE3B,MAAMC,UAAYC,YAGhBC,YAAYC,GACVC,MAAMD,GAENE,KAAKC,MAAQ,CACXC,QAAS,IAIbC,oBACEC,IAAMC,IAAI,kFACTC,KAAKC,IACJ,MAAML,EAAUK,EAAIC,KACpBC,QAAQC,IAAIR,GACZF,KAAKW,SAAS,CAACT,QAASA,MAG5BU,SACE,OACE,yBAAKC,UAAU,OACZC,OAAOC,KAAKf,KAAKC,MAAMC,SAASc,IAAKC,GAEpC,yBAAKC,GAAK,oBACV,0BAAML,UAAY,QAAQI,GAC1B,0BAAMJ,UAAU,SAAQ,kBAACpB,EAAD,CAAc0B,MAAOnB,KAAKC,MAAMC,QAAQe,GAAKG,IAAKC,YAAa,OAAQC,iBAAkB,EAAGC,mBAAmB,EAAMC,OAAQ,WAShJ7B,QC/Bf,MAAM8B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT1B,KAAK8B,IACJA,EAAaC,cAAgB,KAC3B,MAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,KACA,cAA3BF,EAAiBrC,QACfgC,UAAUC,cAAcO,WAK1BhC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBgC,MAAMC,IACLlC,QAAQkC,MAAM,4CAA6CA,KCzEjEC,IAAShC,OAAO,kBAAC,EAAD,MAASiC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBb,UAAW,CAGzE,GADkB,IAAIc,IAAIC,wBAAwBrB,OAAOC,UAC3CqB,SAAWtB,OAAOC,SAASqB,OAIvC,OAGFtB,OAAOuB,iBAAiB,OAAQ,KAC9B,MAAMlB,EAAK,UAAMgB,wBAAN,sBAEPvB,IAiDV,SAAiCO,GAE/BmB,MAAMnB,GACH1B,KAAK8C,IAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQjD,IAAI,gBAAgBkD,QAAQ,cAG7CtB,UAAUC,cAAcsB,MAAMlD,KAAK8B,IACjCA,EAAaqB,aAAanD,KAAK,KAC7BqB,OAAOC,SAAS8B,aAKpB3B,EAAgBC,KAGnBU,MAAM,KACLjC,QAAQC,IACN,gFArEAiD,CAAwB3B,GAIxBC,UAAUC,cAAcsB,MAAMlD,KAAK,KACjCG,QAAQC,IACN,+GAMJqB,EAAgBC,MCzCxB4B,K","file":"static/js/main.2259fcb3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nvar NumberFormat = require('react-number-format');\n\nclass App extends Component {\n\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      cryptos: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,DASH&tsyms=USD')\n    .then(res => {\n      const cryptos = res.data;\n      console.log(cryptos);\n      this.setState({cryptos: cryptos})\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        {Object.keys(this.state.cryptos).map((key) => (\n\n          <div id = \"crypto-container\">\n          <span className = \"left\">{key}</span>\n          <span className=\"right\"><NumberFormat value={this.state.cryptos[key].USD} displayType={'text'} decimalPrecision={3} thousandSeparator={true} prefix={'$'} /></span>\n          </div>\n\n         ) )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode. Please check'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}